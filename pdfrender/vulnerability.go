package pdfrender

import (
	"../data"
	"github.com/signintech/gopdf"
	"math"
	"strconv"
	"strings"
)

func addVulnBlock( pdf *gopdf.GoPdf, vuln data.VulnerabilitiesResultType) {
	greyBlockH := padding*2.0+13.0

	checkEndOfPageWithoutBr( pdf, 2*greyBlockH + 2*brSize )

	pdf.Br(brSize)
	pdf.SetFont(fontType, "", 12)
	pdf.SetFillColor(236, 239, 241)
	addBlock( pdf, leftMargin, pdf.GetY(), 200.0, greyBlockH, "Vulnerability: " +vuln.Name)
	pdf.SetY( pdf.GetY()+greyBlockH)

	pdf.Br(brSize)
	negligbleBlockW := 100.0

	SetSeverityColor( pdf, vuln.AquaSeverity)
	pdf.SetTextColor(0,0, 0)
	addBlock( pdf, leftMargin, pdf.GetY(), negligbleBlockW, greyBlockH, "Severity: " + strings.Title(vuln.AquaSeverity))

	pdf.SetTextColor(0,0,0)
	pdf.SetFillColor(236, 239, 241)
	addBlock( pdf, leftMargin+negligbleBlockW+padding*2, pdf.GetY(), 150.0, greyBlockH, "Score: " + strconv.FormatFloat(vuln.AquaScore, 'f', 2, 64))

	pdf.SetY( pdf.GetY()+greyBlockH)
	pdf.Br(brSize)
	addHrGrey( pdf, pdf.GetY())

	tableTitleH := 16.0
	tableCellH := tableTitleH
	tableCellW := float64(cellWidth)
	checkEndOfPageWithBr( pdf, tableCellH*2+3*brSize+30)
	pdf.SetX(leftMargin)

	//-- table
	pdf.SetFont(fontType, "", 10)

	var version string
	var name []string
	if vuln.Resource.Name != "" {
		name = []string {vuln.Resource.Name}
	} else {
		if vuln.Resource.Path != "" {
			name = splitString( pdf, &vuln.Resource.Path,  tableCellW-2*padding)
		} else {
			name = []string{"No name"}
		}
	}
	tableCellH = math.Max(tableCellH, float64(len(name)*rowSize))

	if vuln.Resource.Version != "" {
		version = vuln.Resource.Version
	} else {
		version = "No version"
	}

	var fixVersion []string

	if vuln.FixVersion != "" {
		fixVersion = splitString( pdf, &vuln.FixVersion,  tableCellW-2*padding)
		tableCellH = math.Max(tableCellH, float64(len(fixVersion)*rowSize))
	} else {
		fixVersion = []string{"no fix"}
	}

	pdf.SetLineWidth(0.5)
	pdf.SetStrokeColor(0,0,0)
	pdf.SetTextColor(124, 151, 182)
	addCellText( pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableTitleH, "Resource")
	addCellText( pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableTitleH, "Full Resource Name")
	addCellText( pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableTitleH, "Fix Version")
	pdf.SetY(pdf.GetY()+tableTitleH)
	pdf.SetX(leftMargin)
	pdf.SetTextColor(0,0,0)

	yResourceBase := pdf.GetY()

	if len(name) > 1 {
		addCellBorder(pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableCellH)
		pdf.SetY(pdf.GetY()+padding/3)
		addMultiLines(pdf,pdf.GetX()+padding, rowSize,  name)
	} else {
		addCellText(pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableCellH, name[0])
	}
	pdf.SetX( leftMargin + cellWidth)
	pdf.SetY(yResourceBase)


	addCellText( pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableCellH, version)

	if len(fixVersion) > 1 {
		addCellBorder(pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableCellH)
		pdf.SetY(pdf.GetY()+padding/3)
		addMultiLines(pdf,pdf.GetX()+padding, rowSize,  fixVersion)
	} else {
		addCellText( pdf, pdf.GetX(), pdf.GetY(), tableCellW, tableCellH, fixVersion[0])
		pdf.SetY(pdf.GetY()+tableCellH)
	}
	pdf.Br(brSize*0.5)
	pdf.SetTextColor(124, 151, 182)
	var solutionLines []string
	var solutionHeight int
	pdf.SetFont(fontType, "", 10)
	if vuln.Solution != "" {
		solutionLines = splitString( pdf, &vuln.Solution, width)
		solutionHeight = len(solutionLines) * rowSize
	} else {
		solutionLines = []string {"none"}
		solutionHeight = rowSize
	}

	checkEndOfPageWithoutBr( pdf, float64(solutionHeight + rowSize) )
	pdf.Cell(nil, "Solution:")
	pdf.Br(brSize*0.8)
	pdf.SetX(leftMargin)
	pdf.SetTextColor(0,0,0)

	addMultiLines( pdf, leftMargin, 12, solutionLines )

	pdf.SetFont(fontType, "", 10)
	multilinesVulnDescription := splitString( pdf, &vuln.Description, width-2*padding)
	if len(multilinesVulnDescription) == 0 {
		multilinesVulnDescription = []string{ "None Description"}
	}
	hBlockVulnDescription := len(multilinesVulnDescription)*14+padding*2

	checkEndOfPageWithBr( pdf, float64( hBlockVulnDescription + rowSize + 4*padding ))
	addHrGrey( pdf, pdf.GetY())
	pdf.Br(brSize)
	pdf.SetX(leftMargin)
	pdf.SetFont(fontTypeBold, "", 10)
	pdf.Cell(nil, "VULNERABILITY DESCRIPTION")
	pdf.Br(brSize)
	pdf.SetFont(fontType, "", 10)

	pdf.SetFillColor(246,249,250)
	pdf.RectFromUpperLeftWithStyle(leftMargin, pdf.GetY(), width, float64(hBlockVulnDescription), "F")
	pdf.Br(padding)
	addMultiLines( pdf,leftMargin+padding, 15, multilinesVulnDescription )
	pdf.Br(brSize)
	addHr(pdf, pdf.GetY())
}

func SetSeverityColor(pdf *gopdf.GoPdf, severity string) {
	switch  strings.ToLower(severity) {
	case "critical":
		pdf.SetFillColor(192,0,0)
	case "high":
		pdf.SetFillColor(255,0,0)
	case "medium":
		pdf.SetFillColor(255,192,0)
	case "low":
		pdf.SetFillColor(255,255,0)
	case "negligible":
		pdf.SetFillColor(0,112,192)
	default:
		pdf.SetFillColor(200, 236, 252)
	}
}
